{"version":3,"sources":["actions/types.js","actions/uiActions.js","actions/statusActions.js","actions/authActions.js","components/Login.js","components/Register.js","reducers/authReducer.js","reducers/uiReducer.js","reducers/statusReducer.js","reducers/index.js","store.js","components/HomePage.js","components/Profile.js","App.js","serviceWorker.js","index.js"],"names":["AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","GET_STATUS","CLEAR_STATUS","BUTTON_CLICKED","BUTTON_RESET","AUTH_SUCCESS","AUTH_FAIL","IS_LOADING","buttonClicked","dispatch","getState","type","isLoading","returnStatus","msg","status","id","payload","axios","defaults","baseURL","Login","state","email","password","onChange","e","setState","target","name","value","onSubmit","preventDefault","user","props","login","this","prevProps","statusMsg","className","button","Card","CardBody","CardTitle","CardSubtitle","to","Alert","color","Form","FormGroup","Label","for","Input","size","placeholder","Button","style","marginTop","block","loading","Spinner","Component","connect","ui","isAuthenticated","auth","body","JSON","stringify","post","headers","Vary","then","res","console","log","data","catch","err","response","Register","register","setTimeout","history","push","alert","respCode","initialState","combineReducers","action","middleware","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","divStyle","HomePage","get","role","exact","path","component","Profile","onLogout","buttonReset","logout","handleGetResult","fetch","json","authState","balance","Number","result","bitcoin","usd","onClick","delete","App","Boolean","location","hostname","match","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.392bce45.chunk.js","sourcesContent":["export const AUTH_ERROR = \"AUTH_ERROR\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\nexport const GET_STATUS = 'GET_STATUS';\nexport const CLEAR_STATUS = 'CLEAR_STATUS';\nexport const BUTTON_CLICKED = 'BUTTON_CLICKED';\nexport const BUTTON_RESET = 'BUTTON_RESET';\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\nexport const AUTH_FAIL = 'AUTH_FAIL';\nexport const IS_LOADING = 'IS_LOADING';","import {\n  BUTTON_CLICKED,\n  BUTTON_RESET,\n  IS_LOADING\n} from \"./types\";\n\nexport const buttonClicked = () => (dispatch, getState) => {\n  dispatch({type: BUTTON_CLICKED});\n};\n\nexport const buttonReset = () => (dispatch, getState) => {\n  dispatch({type: BUTTON_RESET});\n};\n\nexport const isLoading = () => (dispatch, getState) => {\n  dispatch({type: IS_LOADING});\n};\n","import { GET_STATUS, CLEAR_STATUS } from './types';\n\n// RETURN STATUS\nexport const returnStatus = (msg, status, id = null) => {\n  return {\n    type: GET_STATUS,\n    payload: { msg, status, id}\n  };\n};\n\n// CLEAR STATUS\nexport const clearStatus = () => {\n  return {\n    type: CLEAR_STATUS\n  };\n};","import axios from \"axios\";\nimport { returnStatus } from \"./statusActions\";\n\nimport {\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  AUTH_SUCCESS,\n  AUTH_FAIL,\n  LOGOUT_SUCCESS,\n  IS_LOADING,\n} from \"./types\";\n\n//Uncomment below for local testing\naxios.defaults.baseURL = \"http://localhost:5001\";\n\n//uncomment and set url to your own for prod\n//axios.defaults.baseURL = \"https://demos.shawndsilva.com/sessions-auth-app\"\n\n//Check if user is already logged in\nexport const isAuth = () => (dispatch) => {\n  const headers = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"http://localhost:5001\",\n      \"Access-Control-Allow-Credentials\": true,\n    },\n  };\n\n  axios\n    .get(\"/api/users/authchecker\", { headers })\n    .then((res) =>\n      dispatch({\n        type: AUTH_SUCCESS,\n        payload: res.data,\n      })\n    )\n    .catch((err) => {\n      dispatch({\n        type: AUTH_FAIL,\n      });\n    });\n};\n\n//Register New User\nexport const register =\n  ({ name, email, password }) =>\n  (dispatch) => {\n    // Headers\n    const headers = {\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\",\n        \"Access-Control-Allow-Origin\": \"http://localhost:5001\",\n        \"Access-Control-Allow-Credentials\": true,\n        Vary: \"Origin\",\n      },\n    };\n\n    // Request body\n    const body = JSON.stringify({ name, email, password });\n\n    axios\n      .post(\"/api/users/register\", body, headers)\n      .then((res) => {\n        dispatch(returnStatus(res.data, res.status, \"REGISTER_SUCCESS\"));\n        dispatch({ type: IS_LOADING });\n      })\n      .catch((err) => {\n        dispatch(returnStatus(err?.response?.data, err?.response?.status, \"REGISTER_FAIL\"));\n        dispatch({\n          type: REGISTER_FAIL,\n        });\n        dispatch({ type: IS_LOADING });\n      });\n  };\n\n//Login User\nexport const login =\n  ({ email, password }) =>\n  (dispatch) => {\n    // Headers\n    const headers = {\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\",\n        \"Access-Control-Allow-Origin\": \"http://localhost:5001\",\n        \"Access-Control-Allow-Credentials\": true,\n        Vary: \"Origin\",\n      },\n    };\n\n    // Request body\n    const body = JSON.stringify({ email, password });\n\n    axios\n      .post(\"/api/users/login\", body, headers)\n      .then((res) => {\n        console.log(res);\n        dispatch({\n          type: LOGIN_SUCCESS,\n          payload: res.data,\n        });\n        dispatch({ type: IS_LOADING });\n      })\n      .catch((err) => {\n        dispatch(returnStatus(err?.response?.data, err?.response?.status, \"LOGIN_FAIL\"));\n        dispatch({\n          type: LOGIN_FAIL,\n        });\n        dispatch({ type: IS_LOADING });\n      });\n  };\n\n//Logout User and Destroy session\nexport const logout = () => (dispatch) => {\n  const headers = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"http://localhost:5001\",\n      \"Access-Control-Allow-Credentials\": true,\n      Vary: \"Origin\",\n    },\n  };\n\n  axios\n    .delete(\"/api/users/logout\", { headers })\n    .then((res) =>\n      dispatch({\n        type: LOGOUT_SUCCESS,\n      })\n    )\n    .catch((err) => {\n      console.log(err);\n    });\n};\n","import React, { Component } from 'react'\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Card,\n   CardTitle,\n   CardSubtitle,\n  CardBody,\n  Alert,\n  Spinner\n} from \"reactstrap\";\nimport { connect } from \"react-redux\"; // API to connect component state to redux store\nimport PropTypes from \"prop-types\";\nimport { buttonClicked,isLoading } from \"../actions/uiActions\";\nimport { login } from \"../actions/authActions\";\n\nimport { Link } from 'react-router-dom'\nimport './style.css';\n\n\n\nclass Login extends Component {\n\n  state = {\n    email: \"\",\n    password: \"\",\n    msg: \"\"\n  }\n\n  static propTypes = {\n    buttonClicked: PropTypes.func.isRequired,\n    isLoading: PropTypes.func.isRequired,\n    button: PropTypes.bool,\n    login: PropTypes.func.isRequired,\n    isAuthenticated: PropTypes.bool,\n    status: PropTypes.object.isRequired,\n    loading: PropTypes.bool\n  };\n\n  componentDidMount() {\n    this.props.buttonClicked();\n}\n\ncomponentDidUpdate(prevProps) {\n      const status = this.props.status;\n\n     if (status !== prevProps.status) {\n\n      if (status.id === \"LOGIN_FAIL\") {\n        this.setState({ msg: status.statusMsg });\n      }\n    }\n};\n\n\nonChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\nonSubmit = (e) => {\n    e.preventDefault();\n\n    const { email, password} = this.state;\n\n    const user = { email, password};\n    this.props.isLoading();\n    this.props.login(user);\n  };\n\n\n  render() {\n\n    let className = 'divStyle';\n    if (!this.props.button) {\n      className = 'formStyle';\n    }\n    return (\n      <div className={className}>\n\n            <Card>\n                <CardBody >\n                  <CardTitle> <h2><strong>Login</strong></h2></CardTitle>\n                <CardSubtitle className=\"text-muted\">Don't have an account?\n                <Link to=\"/register\"> Register. </Link></CardSubtitle>\n                <br/>\n                {this.state.msg ? (\n              <Alert color=\"danger\">{this.state.msg}</Alert>\n            ) : null}\n                  <Form onSubmit={this.onSubmit} >\n                  <FormGroup>\n\n                    <Label for=\"email\">E-mail</Label>\n                    <Input\n                      type=\"email\"\n                      name=\"email\"\n                      id=\"email\"\n                      size=\"lg\"\n                      placeholder=\"you@youremail.com\"\n                      className=\"mb-3\"\n                      onChange={this.onChange}\n                    />\n\n                    <Label for=\"password\">Password</Label>\n                    <Input\n                      type=\"password\"\n                      name=\"password\"\n                      id=\"password\"\n                      size=\"lg\"\n                      placeholder=\"Enter your Password\"\n                      className=\"mb-3\"\n                      onChange={this.onChange}\n                    />\n                    <Button size=\"lg\" color=\"dark\" style={{ marginTop: \"2rem\" }} block>\n                       { this.props.loading ?\n                       <span >Logging in.. <Spinner size=\"sm\" color=\"light\" /></span> : <span>Login</span>}\n                    </Button>\n                  </FormGroup>\n                </Form>\n                </CardBody>\n            </Card>\n\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({ //Maps state element in redux store to props\n  //location of element in the state is on the right and key is on the left\n  button: state.ui.button, //store.getState().ui.button another way to get button bool\n  isAuthenticated: state.auth.isAuthenticated,\n  status: state.status,\n  loading: state.ui.loading\n});\n\nexport default connect(mapStateToProps,{ login, isLoading, buttonClicked })(Login);\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Card,\n  CardTitle,\n  CardSubtitle,\n  CardBody,\n  Alert,\n  Spinner\n} from \"reactstrap\";\nimport { connect } from \"react-redux\"; // API to connect component state to redux store\nimport PropTypes from \"prop-types\";\nimport { buttonClicked, isLoading } from \"../actions/uiActions\";\nimport { Link } from \"react-router-dom\";\nimport { register } from \"../actions/authActions\";\nimport \"./style.css\";\n\nclass Register extends Component {\n  state = {\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    msg: \"\"\n  };\n\n  static propTypes = {\n    buttonClicked: PropTypes.func.isRequired,\n    button: PropTypes.bool,\n    register: PropTypes.func.isRequired,\n    status: PropTypes.object.isRequired,\n    loading: PropTypes.bool\n  };\n\n  // Removes sign in and register buttons from homepage\n  // upon mounting of Register component\n  componentDidMount() {\n    this.props.buttonClicked();\n  }\n\n  componentDidUpdate(prevProps) {\n    const status = this.props.status;\n\n    // Changes status message if it is different from previous message\n    if (status !== prevProps.status) {\n      if (status.id === \"REGISTER_FAIL\") {\n        this.setState({ msg: status.statusMsg });\n      } else {\n        this.setState({ msg: this.props.status.statusMsg });\n      }\n    }\n\n    // Redirects to Log In screen after a delay of 2secs if successfully registered\n    if (status.id === \"REGISTER_SUCCESS\") {\n      setTimeout(() => {\n        this.props.history.push(\"/login\");\n      }, 2000);\n    }\n  }\n\n  // Sets the value of the input fields to the state items of the same name\n  onChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  // Calls action to register user\n  onSubmit = (e) => {\n    e.preventDefault();\n\n    const { name, email, password } = this.state;\n\n    const user = { name, email, password };\n    this.props.isLoading();\n    this.props.register(user);\n  };\n\n  render() {\n    let className = \"divStyle\";\n\n    // If HTTP 400 error, render alert with red color, else if\n    // it is 200 OK, render alert in green\n    let alert;\n    if (this.state.msg && this.props.status.respCode >= 400) {\n      alert = <Alert color=\"danger\">{this.state.msg}</Alert>;\n    } else if (this.state.msg && this.props.status.respCode === 200) {\n      alert = (\n        <Alert color=\"success\">\n          {this.state.msg} <br /> Redirecting to Log In screen\n        </Alert>\n      );\n    }\n\n    if (!this.props.button) {\n      className = \"formStyle\";\n    }\n    return (\n      <div className={className}>\n        <Card>\n          <CardBody>\n            <CardTitle>\n              <h2>\n                <strong>Register</strong>\n              </h2>\n            </CardTitle>\n            <CardSubtitle className=\"text-muted\">\n              Already have an account?\n              <Link to=\"/login\"> Log In. </Link>\n            </CardSubtitle>\n            <br />\n            {alert}\n            <Form onSubmit={this.onSubmit}>\n              <FormGroup className=\"text-center\">\n                <Label for=\"name\">Name</Label>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"name\"\n                  placeholder=\"Enter your name\"\n                  className=\"mb-3\"\n                  size=\"lg\"\n                  onChange={this.onChange}\n                />\n\n                <Label for=\"email\">E-mail</Label>\n                <Input\n                  type=\"email\"\n                  name=\"email\"\n                  id=\"email\"\n                  placeholder=\"you@youremail.com\"\n                  className=\"mb-3\"\n                  size=\"lg\"\n                  onChange={this.onChange}\n                />\n\n                <Label for=\"password\">Password</Label>\n                <Input\n                  type=\"password\"\n                  name=\"password\"\n                  id=\"password\"\n                  placeholder=\"Enter your Password\"\n                  className=\"mb-3\"\n                  size=\"lg\"\n                  onChange={this.onChange}\n                />\n                <Button color=\"dark\" className=\"mt-5\" size=\"lg\" block>\n                { this.props.loading ?\n                       <span >Registering.. <Spinner size=\"sm\" color=\"light\" /></span> : <span>Register</span>}\n                </Button>\n              </FormGroup>\n            </Form>\n          </CardBody>\n        </Card>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  //Maps state to redux store as props\n  button: state.ui.button,\n  status: state.status,\n  loading: state.ui.loading\n});\n\nexport default connect(\n  mapStateToProps,\n  { register, isLoading, buttonClicked }\n)(Register);\n","import {\n\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  AUTH_SUCCESS,\n  AUTH_FAIL\n} from \"../actions/types\";\n\n\nconst initialState = {\n  isAuthenticated: null,\n  user: null,\n};\n\nexport default function (state = initialState, action) {\n\n  switch (action.type) {\n    case REGISTER_SUCCESS:\n      return {\n        ...state,\n        user: action.payload\n      };\n\n    case LOGIN_SUCCESS:\n    case AUTH_SUCCESS:\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload\n      };\n\n    case AUTH_ERROR:\n    case LOGIN_FAIL:\n    case LOGOUT_SUCCESS:\n    case REGISTER_FAIL:\n    case AUTH_FAIL:\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n      }\n\n    default:\n        return state;\n  }\n\n}","import {\n  BUTTON_CLICKED,\n  BUTTON_RESET,\n  IS_LOADING,\n} from \"./../actions/types\";\n\nconst initialState = {\n  button: true,\n  loading: false\n};\n\nexport default function (state = initialState, action ) {\n  switch (action.type) {\n    case BUTTON_CLICKED:\n      return {\n        ...state,\n        button: false\n      };\n\n      case BUTTON_RESET:\n      return {\n        ...state,\n        button: true\n      };\n\n      case IS_LOADING:\n        return {\n          ...state,\n          loading: !state.loading\n        };\n    default:\n        return state;\n  }\n}","import { GET_STATUS, CLEAR_STATUS} from '../actions/types';\n\nconst initialState = {\n  statusMsg: {},\n  respCode: null,\n  id: null\n}\n\nexport default function(state = initialState, action) {\n  switch(action.type) {\n    case GET_STATUS:\n      return {\n        statusMsg: action.payload.msg,\n        respCode: action.payload.status,\n        id: action.payload.id\n      }\n\n    case CLEAR_STATUS:\n      return {\n        statusMsg: {},\n        respCode: null,\n        id: null\n      };\n\n    default:\n      return state;\n  }\n\n}","import { combineReducers} from 'redux';\n// import errorReducer from './errorReducer';\nimport authReducer from './authReducer';\nimport uiReducer from './uiReducer';\nimport statusReducer from './statusReducer';\n\n\nexport default combineReducers({\n    // error: errorReducer,\n    auth: authReducer,\n    ui: uiReducer,\n    status: statusReducer\n});","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\nconst middleware = [thunk];\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, initialState, composeEnhancers(\n    applyMiddleware(...middleware),\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    ));\n\nexport default store;","import React, { Component } from 'react';\nimport Login from './Login';\nimport Register from './Register';\nimport { connect } from \"react-redux\";\nimport { Route, Switch, Link } from 'react-router-dom'\nimport {\n  Button,\n} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport { buttonClicked } from \"../actions/uiActions\";\nimport './style.css';\nimport store from '../store';\nimport { isAuth } from '../actions/authActions'\nimport {Redirect} from 'react-router-dom'\n\n\nvar divStyle = {\ncolor:'white'\n};\n\nexport class HomePage extends Component {\n\n  componentDidMount() {\n    // Check if session cookie is present\n    store.dispatch(isAuth());\n  }\n\n  static propTypes = {\n    button: PropTypes.bool,\n    isAuthenticated: PropTypes.bool,\n  };\n\n  render() {\n\n    if(this.props.isAuthenticated) {\n      return <Redirect to=\"/profile\" />\n    }\n\n    return (\n       <div className=\"container\">\n        <div className=\"main\">\n          <h1 style={divStyle}> <strong>MERN</strong> Sessions Auth App </h1>\n          <br/>\n            <h5 style={divStyle}>Minimalistic Sessions based Authentication app <span role=\"img\" aria-label=\"lock\">🔒 </span><br></br>Built with React + Redux, NodeJS, Express, MongoDB and Bootstrap</h5>\n            <h5 style={divStyle}>Uses Cookies <span role=\"img\" aria-label=\"lock\">🍪 </span></h5>\n          <br/>\n          <div>\n\n            <Switch>\n              <Route exact path =\"/login\" component={Login}/>\n              <Route exact path =\"/register\" component={Register}/>\n            </Switch>\n\n             { this.props.button && <Link className='divStyle' to=\"/login\">\n               <Button size=\"lg\"  color=\"light\">Sign In</Button>\n               </Link>}\n\n             {this.props.button && <Link className='divStyle' to=\"/register\">\n               <Button  size=\"lg\"  color=\"light\">Register</Button>\n             </Link>}\n\n          </div>\n        </div>\n    </div>\n    )\n  }\n}\nconst mapStateToProps = (state) => ({ //Maps state to redux store as props\n  button: state.ui.button,\n  isAuthenticated: state.auth.isAuthenticated\n\n});\n\nexport default connect(mapStateToProps)(HomePage);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Card, CardTitle, CardSubtitle, CardBody } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport \"./style.css\";\nimport { Redirect } from \"react-router-dom\";\nimport { logout } from \"../actions/authActions\";\nimport { buttonReset } from \"../actions/uiActions\";\n\nexport class Profile extends Component {\n  static propTypes = {\n    button: PropTypes.bool,\n    authState: PropTypes.object.isRequired,\n    buttonReset: PropTypes.func.isRequired,\n    logout: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = { result: 0 };\n  }\n\n  onLogout = (e) => {\n    e.preventDefault();\n    this.props.buttonReset();\n    this.props.logout();\n  };\n\n  componentDidMount() {\n    this.handleGetResult();\n  }\n\n  handleGetResult = async () => {\n    let res = await fetch(\n      \"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd\"\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        const { user } = this.props.authState;\n        const balance = Number(user?.balance);\n\n        this.setState({\n          result: Number(data?.bitcoin.usd) * balance,\n        });\n      });\n  };\n\n  render() {\n    if (!this.props.authState.isAuthenticated) {\n      return <Redirect to=\"/\" />;\n    }\n\n    const { user } = this.props.authState;\n\n    return (\n      <div className=\"container\">\n        <div className=\"main\">\n          <Card>\n            <CardBody>\n              <CardTitle>\n                <h1>\n                  {user ? `Welcome, ${user.name}` : \"\"}{\" \"}\n                  <span role=\"img\" aria-label=\"party-popper\">\n                    🎉{\" \"}\n                  </span>{\" \"}\n                </h1>\n              </CardTitle>\n              <br />\n              <CardSubtitle>\n                Amount <h5>{this.state?.result} </h5>\n              </CardSubtitle>\n              <br />\n              <CardSubtitle>\n                <h5>\n                  {\" \"}\n                  You are now Logged In{\" \"}\n                  <span role=\"img\" aria-label=\"clap\">\n                    👏{\" \"}\n                  </span>\n                </h5>\n              </CardSubtitle>\n              <br />\n              <Button size=\"lg\" onClick={this.onLogout} color=\"primary\">\n                Logout\n              </Button>\n            </CardBody>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  //Maps state to redux store as props\n  button: state.ui.button,\n  authState: state.auth,\n});\n\nexport default connect(mapStateToProps, { logout, buttonReset })(Profile);\n","import React , { Component } from 'react';\nimport HomePage from './components/HomePage';\nimport Profile from './components/Profile';\nimport { Route, Switch} from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n\nclass App extends Component {\n\n  render () {\n    return (\n      <Provider store={store}>\n            <Switch>\n              <Route exact path =\"/profile\" component={Profile}/>\n            </Switch>\n        < HomePage/>\n      </Provider>\n    );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\n\nReactDOM.render(\n  //REMOVE BASENAME if not hosting from sub directory\n  <BrowserRouter basename=\"/sessions-auth-app\">\n    <App />\n  </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}